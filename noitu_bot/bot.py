import platform
from datetime import datetime, time
import logging
import random
import discord
import re
import os
import asyncio
from discord.utils import get
from discord.ext import tasks
from discord import app_commands
from redis import Redis
from .config import (
    DISCORD_TOKEN,
    CHANNEL_ID,
    DICT_PATH,
    GUILD_ID,
    REDIS_HOST,
    REDIS_PORT,
    REDIS_DB,
    REDIS_DECODE,
    CHAT_CHANNEL_IDS,
    CHAT_ROLE_ID,
    ROLE_ID,
    Fail_Limit,
)

# FIX: S·ª≠a import ƒë·ªÉ g·ªçi ch√≠nh x√°c h√†m generate_bot_reply t·ª´ gemini_check.py
try:
    from ai_gemini.gpt_mini_bot import check_vietnamese_word
except ImportError:
    logging.warning("Kh√¥ng t√¨m th·∫•y h√†m check_vietnamese_word.")


    async def check_vietnamese_word(*args, **kwargs):
        return "kh√¥ng"

try:
    from ai_gemini.gemini_check import generate_bot_reply as gpt_generate_bot_reply
except ImportError:
    logging.warning("Kh√¥ng t√¨m th·∫•y h√†m gpt_generate_bot_reply.")


    async def gpt_generate_bot_reply(*args, **kwargs):
        return "L·ªói AI."

# START FIX: IMPORTS V√Ä FALLBACK CHO MONITORING/REDIS METRICS
from .redis_keys import K_DICT

try:
    from .monitoring_server import start_monitoring_server, REDIS_HITS_GAUGE
except ImportError:
    print("Warning: Monitoring server imports failed. Running without Prometheus.")


    def start_monitoring_server(*args, **kwargs):
        pass


    class DummyGauge:
        def set(self, *args, **kwargs): pass


    REDIS_HITS_GAUGE = DummyGauge()
# END FIX

from .dict_bootstrap import bootstrap_dictionary_by_token_exact, read_words_from_file
from .referee import WordChainRefereeByLastWordExact
from .redis_keys import (
    K_PAUSED,
    K_LAST_USER,
    K_DICT,
    K_TOKEN_IDX,
    K_REMAIN,
    K_USED_TOKEN,
    K_LAST_WORD,
    K_BLACKLIST,
)
from .commands import NoituSlash
from .leaderboard_json import (
    record_win_json,
    get_leaderboard_json,
    # FIX: ƒê√£ s·ª≠a l·ªói typo (b·ªè "caster")
    format_leaderboard_embed,
    record_word_attempt_json,
)
from .utils_vi import norm_phrase, first_token, last_token
from .word_react import spawn_word_react_task, add_word_to_dictionary
from .ratelimit import RateLimiter
from typing import Optional
from .blacklist_utils import (
    ensure_blacklist_loaded,
    normalize_word,
    is_in_blacklist,
    add_to_blacklist,
)

is_checkspell = os.getenv("IS_CHECKSPELL", True)
ai_rate_limiter = RateLimiter(max_calls=50, period_seconds=60)

user_cooldowns = {}
COOLDOWN_SECONDS = 30

EMOJI_PATTERN = re.compile(r"^(\s*(<a?:\w+:\d+>|[\U0001F000-\U0001FAFF]))+\s*$")


async def handle_invalid_word(redis_client, input_word: str, ref, chanel):
    if await ai_rate_limiter.is_limited():
        print(f"Rate limit ƒë√£ ƒë·∫°t, b·ªè qua ki·ªÉm tra t·ª´: '{input_word}'")
        return

    await ensure_blacklist_loaded(redis_client, "words/blacklist.txt")

    normalized_word = normalize_word(input_word)
    if not normalized_word:
        return

    try:
        if is_in_blacklist(redis_client, normalized_word):
            print(f"[BLACKLIST] B·ªè qua '{normalized_word}' (ƒë√£ trong blacklist).")
            return
    except Exception as ex:
        print(f"[BLACKLIST] L·ªói khi ki·ªÉm tra: {ex}")
        return

    try:
        verdict = await check_vietnamese_word(normalized_word)
    except Exception as ex:
        print(f"[CHECK WORD] L·ªói g·ªçi AI: {ex}")
        return

    if verdict == "c√≥":
        try:
            is_added = add_word_to_dictionary(
                r=redis_client, phrase=input_word, ref=ref
            )
            if is_added:
                await chanel.send(
                    f"‚úÖ ƒê√£ th√™m **{input_word}** v√†o t·ª´ ƒëi·ªÉn (d√πng ƒë∆∞·ª£c ngay) - BY CHATGPT!"
                )
        except Exception as ex:
            print(f"[DICT] L·ªói khi th√™m '{normalized_word}' v√†o {K_DICT()}: {ex}")
    else:
        try:
            added = add_to_blacklist(
                redis_client, normalized_word, "words/blacklist.txt"
            )
            if added.get("redis_added") or added.get("file_added"):
                print(f"[BLACKLIST] ƒê√£ th√™m '{normalized_word}' v√†o blacklist")
            else:
                print(f"[BLACKLIST] '{normalized_word}' ƒë√£ t·ªìn t·∫°i trong blacklist")
        except Exception as ex:
            print(f"[BLACKLIST] L·ªói khi th√™m '{normalized_word}': {ex}")


def game_id_for_channel(channel_id: int) -> str:
    return f"channel:{channel_id}"


def run():
    if not DISCORD_TOKEN or DISCORD_TOKEN == "YOUR_BOT_TOKEN":
        raise RuntimeError("Please set DISCORD_TOKEN environment variable.")
    if not CHANNEL_ID:
        raise RuntimeError("Please set CHANNEL_ID environment variable.")

    r = Redis(
        host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, decode_responses=REDIS_DECODE
    )
    gid = game_id_for_channel(CHANNEL_ID)
    ref = WordChainRefereeByLastWordExact(r, gid)

    # KH·ªûI ƒê·ªòNG MONITORING SERVER (HEALTHCHECK/METRICS)
    start_monitoring_server(port=8000)

    intents = discord.Intents.default()
    intents.message_content = True
    intents.members = True
    intents.guilds = True
    intents.reactions = True
    intents.message_content = True
    bot = discord.Client(intents=intents)
    tree = app_commands.CommandTree(bot)

    # register slash group
    noitu = NoituSlash(
        name="noitu",
        description="Qu·∫£n l√Ω tr√≤ n·ªëi t·ª´",
        ref=ref,
        channel_id=CHANNEL_ID,
        r=r,
    )
    tree.add_command(noitu)

    @tasks.loop(seconds=60)
    async def send_last_word_reminder():
        await bot.wait_until_ready()
        if r.get(K_PAUSED(gid)) == "1":
            return
        last_word = r.get(K_LAST_WORD(gid))
        channel = bot.get_channel(CHANNEL_ID)

        if channel and last_word:
            try:
                last_msgs = [msg async for msg in channel.history(limit=1)]
                if last_msgs:
                    last_msg = last_msgs[0]
                    if "üí° T·ª´ hi·ªán t·∫°i l√†:" in last_msg.content:
                        return
                await channel.send(f"üí° T·ª´ hi·ªán t·∫°i l√†: **{last_word}**")
            except Exception as e:
                logging.error(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn nh·∫Øc nh·ªü: {e}")

    # FIX: T√°ch logic I/O n·∫∑ng ra kh·ªèi on_ready
    async def setup_bot_data():
        """Ch·∫°y I/O n·∫∑ng trong thread ri√™ng ƒë·ªÉ kh√¥ng block bot"""
        await bot.wait_until_ready()
        logging.info("Bot ƒë√£ s·∫µn s√†ng. B·∫Øt ƒë·∫ßu n·∫°p d·ªØ li·ªáu (n·ªÅn)...")

        try:
            # Ch·∫°y h√†m blocking I/O (ƒë·ªçc file) trong m·ªôt thread ri√™ng
            words = await asyncio.to_thread(read_words_from_file, DICT_PATH)
            if not words:
                logging.warning("File t·ª´ ƒëi·ªÉn kh√¥ng t√¨m th·∫•y ho·∫∑c r·ªóng: %s", DICT_PATH)
            else:
                # Ch·∫°y h√†m bootstrap (Redis I/O) trong thread
                await asyncio.to_thread(bootstrap_dictionary_by_token_exact, r, words)
                logging.info("N·∫°p t·ª´ ƒëi·ªÉn v√†o Redis th√†nh c√¥ng t·ª´ %s", DICT_PATH)

            # C·∫≠p nh·∫≠t metric
            dict_size = await asyncio.to_thread(r.scard, K_DICT())
            REDIS_HITS_GAUGE.set(dict_size)
            logging.info(f"C·∫≠p nh·∫≠t Redis dictionary size metric: {dict_size}")

        except Exception as e:
            logging.exception("N·∫°p t·ª´ ƒëi·ªÉn th·∫•t b·∫°i: %s", e)

        # B·∫Øt ƒë·∫ßu v√°n m·ªõi (SAU KHI n·∫°p t·ª´ ƒëi·ªÉn)
        ch = bot.get_channel(CHANNEL_ID)
        if ch:
            # ref.start_round_random() c≈©ng l√† I/O, ch·∫°y trong thread
            opening = await asyncio.to_thread(ref.start_round_random)
            if opening:
                await ch.send(f"üéÆ **V√°n m·ªõi!** T·ª´ m·ªü m√†n: **{opening}**")
            else:
                await ch.send("‚ö†Ô∏è T·ª´ ƒëi·ªÉn r·ªóng ho·∫∑c ch∆∞a n·∫°p t·ª´ ƒëi·ªÉn.")
        logging.info("ƒê√£ tham gia k√™nh %s", CHANNEL_ID)

    @bot.event
    async def on_ready():
        logging.info("Bot ready as %s", bot.user)
        try:
            if GUILD_ID:
                await tree.sync(guild=discord.Object(id=GUILD_ID))
                logging.info("Slash commands synced to guild %s.", GUILD_ID)
            else:
                await tree.sync()
                logging.info("Slash commands synced globally.")
        except Exception as e:
            logging.exception("Slash sync failed: %s", e)

        # FIX: K√≠ch ho·∫°t task n·ªÅn ƒë·ªÉ n·∫°p d·ªØ li·ªáu
        # ƒêi·ªÅu n√†y gi·∫£i ph√≥ng on_ready, cho ph√©p bot nh·∫≠n l·ªánh ngay
        bot.loop.create_task(setup_bot_data())

        if not send_last_word_reminder.is_running():
            send_last_word_reminder.start()

    @bot.event
    async def on_message(message: discord.Message):
        is_chat_channel = message.channel.id in CHAT_CHANNEL_IDS
        is_game_channel = message.channel.id == CHANNEL_ID

        if message.author.bot or (not is_chat_channel and not is_game_channel):
            return

        content = message.content.strip()
        if not content:
            return

        if message.stickers:
            return

        if EMOJI_PATTERN.match(content):
            return

        # START: LOGIC X·ª¨ L√ù CHATBOT REPLY (C√† kh·ªãa)
        if message.reference:
            try:
                replied_to = await message.channel.fetch_message(
                    message.reference.message_id
                )
                if replied_to.author == bot.user and is_chat_channel:
                    async def thinking_and_replying():
                        async with message.channel.typing():
                            reply_content = await gpt_generate_bot_reply(message)
                            await message.reply(reply_content, mention_author=False)

                    bot.loop.create_task(thinking_and_replying())
                    return
            except discord.NotFound:
                pass
            except Exception as e:
                print(f"L·ªói khi x·ª≠ l√Ω tin nh·∫Øn reply: {e}")
        # END: LOGIC X·ª¨ L√ù CHATBOT REPLY

        # KH·ªêI LOGIC CH·ªà D√ÄNH CHO GAME N·ªêI T·ª™
        if not is_game_channel:
            return

        if len(content.split()) != 2:
            return

        last_user = r.get(K_LAST_USER(ref.gid))
        if last_user and last_user != "BOT" and last_user == str(message.author.id):
            try:
                await message.add_reaction("‚è≥")
            except Exception:
                pass
            return

        res = ref.submit(user_id=str(message.author.id), raw_phrase=content)

        is_correct_word = res["ok"] and res["msg"] not in ["USED", "RULE_MISMATCH"]

        if res["msg"] != "ENDED":
            record_word_attempt_json(
                user_id=str(message.author.id),
                is_correct=is_correct_word,
                base_dir="./data"
            )

        try:
            if res["ok"]:
                emoji = "‚úÖ"
            elif res["msg"] == "USED":
                emoji = "üîÅ"
            elif res["msg"] == "FAIL_LIMIT_REACHED":
                emoji = "üîí"
            elif res["msg"] == "COOLDOWN":
                remaining = res.get("cooldown_left", "?")
                number_emojis = {
                    1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£",
                }
                print(f"{number_emojis.get(remaining, '‚ùì')}")
                emoji = f"{number_emojis.get(remaining, '‚ùì')}"
            else:
                emoji = "‚õî"
                print(res["msg"])
                if res["msg"] == "NOT_IN_DICT":
                    if is_checkspell:
                        asyncio.create_task(
                            handle_invalid_word(r, content, ref, message.channel)
                        )
            await message.add_reaction(emoji)
        except Exception:
            pass

        if res["ended"] and res["msg"] != "ENDED":
            winner_id = res.get("winner")

            if winner_id and winner_id != "BOT":
                try:
                    winner_member = message.guild.get_member(int(winner_id))
                    display_name = (
                        winner_member.display_name
                        if winner_member
                        else f"User {winner_id}"
                    )
                except (ValueError, AttributeError):
                    display_name = f"User {winner_id}"

                total_wins = record_win_json(
                    user_id=str(winner_id),
                    display_name=display_name,
                    base_dir="./data",
                )
                top5 = get_leaderboard_json(top_n=5, base_dir="./data")
                lb_embed = format_leaderboard_embed(top5)

                hint = ref.get_hint()
                if res["msg"] == "FAIL_LIMIT_REACHED":
                    win_announcement = (
                        f"üí° **G·ª£i √Ω:** `{hint}`"
                        f"üîí **Sai t·ª´ v∆∞·ª£t qu√° {Fail_Limit} l·∫ßn, k·∫øt th√∫c v√°n!**\n"
                        f"üèÅ Ng∆∞·ªùi chi·∫øn th·∫Øng l√† **<@{winner_id}>**! (t·ªïng: {total_wins})"
                    )
                else:
                    win_announcement = (
                        f"üèÅ **<@{winner_id}> th·∫Øng!** (t·ªïng: {total_wins})"
                    )

                opening = ref.start_round_random()
                if opening:
                    await message.channel.send(
                        f"{win_announcement}\n"
                        f"üîÑ **V√°n m·ªõi!** T·ª´ m·ªü m√†n: **{opening}**",
                        embed=lb_embed,
                    )
                else:
                    await message.channel.send(
                        f"{win_announcement}\n"
                        f"‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü v√°n m·ªõi (t·ª´ ƒëi·ªÉn r·ªóng).",
                        embed=lb_embed,
                    )
            else:
                opening = ref.start_round_random()
                if opening:
                    await message.channel.send(
                        f"üîí V√°n ch∆°i k·∫øt th√∫c do c√≥ qu√° nhi·ªÅu l∆∞·ª£t sai.\n"
                        f"üîÑ **V√°n m·ªõi!** T·ª´ m·ªü m√†n: **{opening}**"
                    )
                else:
                    await message.channel.send("‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü v√°n m·ªõi (t·ª´ ƒëi·ªÉn r·ªóng).")

    @bot.event
    async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
        spawn_word_react_task(
            bot,
            r,
            ref,
            CHANNEL_ID,
            ROLE_ID,
            DICT_PATH,
            norm_phrase,
            first_token,
            last_token,
            K_DICT,
            K_TOKEN_IDX,
            K_LAST_WORD,
            K_USED_TOKEN,
            K_REMAIN,
            payload,
        )

    bot.run(DISCORD_TOKEN)