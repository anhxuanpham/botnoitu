import logging
import discord
import os, asyncio, tarfile, tempfile
from datetime import datetime
from pathlib import Path
from discord import app_commands
from .redis_keys import K_PAUSED, K_ENDED, K_LAST_USER
from .referee import WordChainRefereeByLastWordExact
from .leaderboard_json import (
    get_leaderboard_json,
    format_leaderboard_embed,
    record_win_json,
)
from .config import (
    ROLE_ID,
    DICT_PATH,
    BLACKLIST_PATH,
    LEADERBOARD_PATH,
)  # import role id


def build_leaderboard_embed(
        guild: discord.Guild | None,
        gid: str,
        top_n: int = 10,
        title: str = "üèÜ B·∫£ng x·∫øp h·∫°ng N·ªëi T·ª´",
        color: int = 0xFFD166,
) -> discord.Embed:
    rows = get_leaderboard_json(top_n=top_n, base_dir="./data")
    if not rows:
        return discord.Embed(title=title, description="(ch∆∞a c√≥ ai th·∫Øng)", color=color)

    medals = ["ü•á", "ü•à", "ü•â"]
    lines = []
    for i, r in enumerate(rows, start=1):
        icon = medals[i - 1] if i <= len(medals) else f"#{i}"
        name = r["name"]
        wins = r["wins"]
        lines.append(f"{icon} **{name}** ‚Äî **{wins}** th·∫Øng")

    emb = discord.Embed(title=title, description="\n".join(lines), color=color)
    emb.set_footer(text="C·∫≠p nh·∫≠t theo l·∫ßn th·∫Øng ƒë√£ l∆∞u")
    return emb


class NoituSlash(app_commands.Group):
    def __init__(
            self,
            name: str,
            description: str,
            *,
            ref: WordChainRefereeByLastWordExact,
            channel_id: int,
            r,
    ):
        super().__init__(name=name, description=description)
        self.ref = ref
        self.channel_id = channel_id
        self.r = r

    def _has_permission(self, inter: discord.Interaction) -> bool:
        expected_id = ROLE_ID
        user_role_ids = [r.id for r in inter.user.roles]
        print(f"DEBUG_PERM: Expected ROLE_ID (int): {expected_id}")
        print(f"DEBUG_PERM: User {inter.user.name} roles (int list): {user_role_ids}")
        has_perm = any(role.id == expected_id for role in inter.user.roles)
        print(f"DEBUG_PERM: Has Permission: {has_perm}")
        return has_perm

    @app_commands.command(
        name="batdau", description="Reset ho√†n to√†n v√°n v√† m·ªü v√°n m·ªõi (random)."
    )
    async def batdau(self, inter: discord.Interaction):
        # FIX: Defer C√îNG KHAI (ephemeral=False) ngay l·∫≠p t·ª©c
        if not inter.response.is_done():
            await inter.response.defer(ephemeral=False)

        # Ki·ªÉm tra quy·ªÅn h·∫°n v√† k√™nh (SAU KHI DEFER)
        if not self._has_permission(inter):
            # Tin nh·∫Øn l·ªói v·∫´n c√≥ th·ªÉ l√† ·∫®n (ephemeral=True)
            await inter.followup.send(
                "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True
            )
            return
        if inter.channel_id != self.channel_id:
            await inter.followup.send("‚ùå Sai k√™nh.", ephemeral=True)
            return

        # LOGIC CH√çNH
        self.r.delete(K_PAUSED(self.ref.gid))
        opening = self.ref.start_round_random()
        logging.info("/noitu batdau by %s -> %s", inter.user.id, opening)

        # G·ª≠i k·∫øt qu·∫£ (c√¥ng khai)
        if opening:
            await inter.followup.send(
                f"üîÑ **Reset v√°n!**\nüéÆ **V√°n m·ªõi!** T·ª´ m·ªü m√†n: **{opening}**", ephemeral=False
            )
        else:
            await inter.followup.send("‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü v√°n m·ªõi (t·ª´ ƒëi·ªÉn r·ªóng).", ephemeral=False)

    @app_commands.command(
        name="ketthuc", description="T·∫°m ng∆∞ng bot; ch·ªâ nh·∫≠n l·ªánh qu·∫£n tr·ªã."
    )
    async def ketthuc(self, inter: discord.Interaction):
        # FIX: Defer C√îNG KHAI
        if not inter.response.is_done():
            await inter.response.defer(ephemeral=False)

        if not self._has_permission(inter):
            await inter.followup.send(
                "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True
            )
            return
        if inter.channel_id != self.channel_id:
            await inter.followup.send("‚ùå Sai k√™nh.", ephemeral=True)
            return

        self.r.set(K_PAUSED(self.ref.gid), "1")
        logging.info("/noitu ketthuc by %s", inter.user.id)

        # G·ª≠i k·∫øt qu·∫£ (c√¥ng khai)
        await inter.followup.send(
            "‚è∏Ô∏è **ƒê√£ t·∫°m ng∆∞ng tr√≤ n·ªëi t·ª´.** D√πng `/noitu batdau` ƒë·ªÉ ch∆°i l·∫°i.", ephemeral=False
        )

    @app_commands.command(
        name="goiy", description="G·ª£i √Ω, cho ng∆∞·ªùi cu·ªëi th·∫Øng v√† m·ªü v√°n m·ªõi."
    )
    async def goiy(self, inter: discord.Interaction):
        # FIX: Defer ·∫®N (v√¨ tin nh·∫Øn g·ª£i √Ω l√† ·∫®n)
        if not inter.response.is_done():
            await inter.response.defer(ephemeral=True)

        if not self._has_permission(inter):
            await inter.followup.send(
                "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True
            )
            return
        if inter.channel_id != self.channel_id:
            await inter.followup.send("‚ùå Sai k√™nh.", ephemeral=True)
            return
        if self.r.get(K_PAUSED(self.ref.gid)) == "1":
            await inter.followup.send(
                "‚è∏Ô∏è ƒêang t·∫°m ng∆∞ng. D√πng `/noitu batdau` ƒë·ªÉ ti·∫øp t·ª•c.", ephemeral=True
            )
            return

        last_uid = self.r.get(K_LAST_USER(self.ref.gid))
        if not last_uid:
            await inter.followup.send("‚ö†Ô∏è Ch∆∞a c√≥ ng∆∞·ªùi ch∆°i tr∆∞·ªõc ƒë√≥.", ephemeral=True)
            return

        if last_uid == 'BOT':
            await inter.followup.send("‚ö†Ô∏è L·∫ßn ch∆°i cu·ªëi c√πng l√† c·ªßa bot. Kh√¥ng th·ªÉ trao chi·∫øn th·∫Øng.", ephemeral=True)
            return

        try:
            last_uid_int = int(last_uid)
        except ValueError:
            await inter.followup.send(f"‚ö†Ô∏è ID ng∆∞·ªùi ch∆°i cu·ªëi c√πng '{last_uid}' kh√¥ng h·ª£p l·ªá (l·ªói d·ªØ li·ªáu).",
                                      ephemeral=True)
            return

        hint = self.ref.get_hint()
        if hint:
            await inter.followup.send(f"üí° **G·ª£i √Ω:** `{hint}`", ephemeral=True)

        # Logic trao th∆∞·ªüng (c√¥ng khai)
        member = inter.guild.get_member(last_uid_int) if inter.guild else None
        if not member and inter.guild:
            try:
                member = await inter.guild.fetch_member(last_uid_int)
            except Exception:
                member = None
        display_name = member.display_name if member else str(last_uid)

        total_wins = record_win_json(
            user_id=str(last_uid),
            display_name=display_name,
            base_dir="./data",
        )
        top5 = get_leaderboard_json(top_n=5, base_dir="./data")
        lb_embed = format_leaderboard_embed(top5)

        opening = self.ref.start_round_random()
        if opening:
            # G·ª≠i tin nh·∫Øn c√¥ng khai (d√πng ephemeral=False)
            await inter.followup.send(
                f"üèÅ **<@{last_uid}> th·∫Øng!** (t·ªïng: {total_wins})\n"
                f"üîÑ **V√°n m·ªõi!** T·ª´ m·ªü m√†n: **{opening}**",
                embed=lb_embed, ephemeral=False
            )
        else:
            await inter.followup.send(
                f"üèÅ **<@{last_uid}> th·∫Øng!** (t·ªïng: {total_wins})\n"
                f"‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü v√°n m·ªõi (t·ª´ ƒëi·ªÉn r·ªóng).",
                embed=lb_embed, ephemeral=False
            )

    @app_commands.command(name="bxh", description="Xem b·∫£ng x·∫øp h·∫°ng (top 10).")
    @app_commands.describe(solan="S·ªë ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu mu·ªën xem (m·∫∑c ƒë·ªãnh 10, t·ªëi ƒëa 25)")
    async def bxh(self, inter: discord.Interaction, solan: int = 10):
        # FIX: Defer C√îNG KHAI - Check if not already acknowledged
        if not inter.response.is_done():
            await inter.response.defer(ephemeral=False)

        if not self._has_permission(inter):
            await inter.followup.send(
                "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True
            )
            return
        if inter.channel_id != self.channel_id:
            await inter.followup.send("‚ùå Sai k√™nh.", ephemeral=True)
            return

        top_n = max(1, min(25, solan))
        rows = get_leaderboard_json(top_n=top_n)
        embed = format_leaderboard_embed(rows)

        await inter.followup.send(embed=embed, ephemeral=False)

    @app_commands.command(
        name="backup", description="ƒê√≥ng g√≥i words + leaderboard v√† g·ª≠i DM."
    )
    async def backup(self, inter: discord.Interaction):
        # FIX: Defer ·∫®N (v√¨ tin nh·∫Øn n√†y l√† ·∫®n)
        if not inter.response.is_done():
            await inter.response.defer(ephemeral=True)

        if inter.user.id != 237506940391915522:
            await inter.followup.send("‚ùå Kh√¥ng ƒë∆∞·ª£c ph√©p.", ephemeral=True)
            return

        await inter.followup.send(
            "‚è≥ ƒêang backup, s·∫Ω g·ª≠i file qua DM khi xong.", ephemeral=True
        )
        asyncio.create_task(self._backup_dm_task(inter.user))

    async def _backup_dm_task(self, user: discord.User):
        files = [p for p in [DICT_PATH, LEADERBOARD_PATH, BLACKLIST_PATH] if p.exists()]
        if not files:
            try:
                await user.send("‚ùå Kh√¥ng t√¨m th·∫•y files c·∫ßn backup.")
            except:
                pass
            return

        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        fname = f"backup_noitu_{ts}.tar.gz"

        try:
            with tempfile.TemporaryDirectory() as tmp:
                tarpath = Path(tmp) / fname
                with tarfile.open(tarpath, "w:gz") as tar:
                    for p in files:
                        tar.add(p, arcname=p.as_posix())
                try:
                    await user.send(
                        content=f"‚úÖ {fname}",
                        file=discord.File(str(tarpath), filename=fname),
                    )
                except Exception as e:
                    try:
                        await user.send(f"‚ùå L·ªói: {e}")
                    except:
                        pass
        except Exception as e:
            try:
                await user.send(f"‚ùå L·ªói: {e}")
            except:
                pass